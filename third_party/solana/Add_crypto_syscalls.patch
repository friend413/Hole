Index: fetch-spl.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fetch-spl.sh	(revision 745a97685408ff4249d96333a7885cd214639b70)
+++ fetch-spl.sh	(revision 97144cdb8e9cb4d83943b0b5898d08f57844a4dd)
@@ -40,6 +40,9 @@
 fetch_program token 1.0.0 TokenSVp5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o BPFLoader1111111111111111111111111111111111
 fetch_program memo  1.0.0 Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo BPFLoader1111111111111111111111111111111111

+# Add bridge
+genesis_args+=(--bpf-program Bridge1p5gheXUvJ6jGWGeCsgPKgnE3YgdGKRVCMY9o BPFLoader2111111111111111111111111111111111 /opt/solana/deps/spl_bridge.so)
+
 echo "${genesis_args[@]}" > spl-genesis-args.sh

 echo
Index: account-decoder/src/parse_token.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- account-decoder/src/parse_token.rs	(revision 97144cdb8e9cb4d83943b0b5898d08f57844a4dd)
+++ account-decoder/src/parse_token.rs	(date 1598606089966)
@@ -30,11 +30,7 @@
     if data.len() == size_of::<Account>() {
         let account: Account = *unpack(&mut data)
             .map_err(|_| ParseAccountError::AccountNotParsable(ParsableAccount::SplToken))?;
-        let decimals = mint_decimals.ok_or_else(|| {
-            ParseAccountError::AdditionalDataMissing(
-                "no mint_decimals provided to parse spl-token account".to_string(),
-            )
-        })?;
+        let decimals = mint_decimals.or(Some(0)).unwrap();
         Ok(TokenAccountType::Account(UiTokenAccount {
             mint: account.mint.to_string(),
             owner: account.owner.to_string(),
Index: programs/bpf_loader/src/bpf_verifier.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- programs/bpf_loader/src/bpf_verifier.rs	(revision 6563726f227414164c32a0373fa32b0f87fbd4e8)
+++ programs/bpf_loader/src/bpf_verifier.rs	(date 1600862128332)
@@ -58,7 +58,7 @@
     if prog.len() % ebpf::INSN_SIZE != 0 {
         return Err(VerifierError::ProgramLengthNotMultiple.into());
     }
-    if prog.len() > ebpf::PROG_MAX_SIZE {
+    if prog.len() > ebpf::PROG_MAX_SIZE * 2 {
         return Err(VerifierError::ProgramTooLarge(prog.len() / ebpf::INSN_SIZE).into());
     }


--- core/src/rpc.rs
+++ core/src/rpc.rs
@@ -2210,6 +2210,10 @@ impl RpcSol for RpcSolImpl {
                 return Err(RpcCustomError::TransactionSignatureVerificationFailure.into());
             }

+            if let Err(e) = transaction.verify_precompiles() {
+                return Err(RpcCustomError::TransactionPrecompileVerificationFailure(e).into());
+            }
+
             if meta.health.check() != RpcHealthStatus::Ok {
                 return Err(RpcCustomError::RpcNodeUnhealthy.into());
             }

--- core/src/rpc_error.rs
+++ core/src/rpc_error.rs
@@ -7,6 +7,7 @@ const JSON_RPC_SERVER_ERROR_2: i64 = -32002;
 const JSON_RPC_SERVER_ERROR_3: i64 = -32003;
 const JSON_RPC_SERVER_ERROR_4: i64 = -32004;
 const JSON_RPC_SERVER_ERROR_5: i64 = -32005;
+const JSON_RPC_SERVER_ERROR_6: i64 = -32006;

 pub enum RpcCustomError {
     BlockCleanedUp {
@@ -22,6 +23,7 @@ pub enum RpcCustomError {
         slot: Slot,
     },
     RpcNodeUnhealthy,
+    TransactionPrecompileVerificationFailure(solana_sdk::transaction::TransactionError),
 }

 impl From<RpcCustomError> for Error {
@@ -58,6 +60,11 @@ impl From<RpcCustomError> for Error {
                 message: "RPC node is unhealthy".to_string(),
                 data: None,
             },
+            RpcCustomError::TransactionPrecompileVerificationFailure(e) => Self {
+                code: ErrorCode::ServerError(JSON_RPC_SERVER_ERROR_6),
+                message: format!("Transaction precompile verification failure {:?}", e),
+                data: None,
+            },
         }
     }
 }
