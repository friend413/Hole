//! Error types

use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
use solana_program::program_error::PrintProgramError;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the TokenSwap program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum VAAError {
    /// The given action is unknown or invalid
    #[error("InvalidAction")]
    InvalidAction,

    /// An io error occurred
    #[error("IOError")]
    IOError,
}

/// Errors that may be returned by the TokenSwap program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum Error {
    /// The deserialization of the Token state returned something besides State::Token.
    #[error("ExpectedToken")]
    ExpectedToken,
    /// The deserialization of the Bridge returned something besides State::Bridge.
    #[error("ExpectedBridge")]
    ExpectedBridge,
    /// The deserialization of the Token state returned something besides State::Account.
    #[error("ExpectedAccount")]
    ExpectedAccount,
    /// The deserialization of the GuardianSet state returned something besides State::GuardianSet.
    #[error("ExpectedGuardianSet")]
    ExpectedGuardianSet,
    /// State is uninitialized.
    #[error("State is unititialized")]
    UninitializedState,
    /// The program address provided doesn't match the value generated by the program.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    /// The submitted VAA is invalid
    #[error("InvalidVAAFormat")]
    InvalidVAAFormat,
    /// The submitted VAA is invalid form
    #[error("InvalidVAAAction")]
    InvalidVAAAction,
    /// The submitted VAA has an invalid signature
    #[error("InvalidVAASignature")]
    InvalidVAASignature,
    /// The account is already initialized
    #[error("AlreadyExists")]
    AlreadyExists,
    /// An account was not derived correctly
    #[error("InvalidDerivedAccount")]
    InvalidDerivedAccount,
    /// A given bridge account does not belong to the program
    #[error("WrongBridgeOwner")]
    WrongBridgeOwner,
    /// A parsing operation failed
    #[error("ParseFailed")]
    ParseFailed,
    /// The guardian set that signed this VAA has expired
    #[error("GuardianSetExpired")]
    GuardianSetExpired,
    /// The given VAA has already been claimed
    #[error("VAAClaimed")]
    VAAClaimed,
    /// The given VAA was not signed by the latest guardian set
    #[error("OldGuardianSet")]
    OldGuardianSet,
    /// The guardian set index must increase in steps of 1 on update
    #[error("GuardianIndexNotIncreasing")]
    GuardianIndexNotIncreasing,
    /// The given VAA does not match the proposal
    #[error("VAAProposalMismatch")]
    VAAMessageMismatch,
    /// VAA is longer than the maximum size
    #[error("VAATooLong")]
    VAATooLong,
    /// VAA for this transfer has already been submitted
    #[error("VAAAlreadySubmitted")]
    VAAAlreadySubmitted,
    /// Mismatching guardian set
    #[error("GuardianSetMismatch")]
    GuardianSetMismatch,
    /// Insufficient fees
    #[error("InsufficientFees")]
    InsufficientFees,
    /// Invalid owner
    #[error("InvalidOwner")]
    InvalidOwner,
    /// Invalid Sysvar
    #[error("InvalidSysvar")]
    InvalidSysvar,
    /// Invalid Chain
    #[error("InvalidChain")]
    InvalidChain,
    /// Emitter is not a signer
    #[error("EmitterNotSigner")]
    EmitterNotSigner,
}

#[cfg(feature = "program")]
impl PrintProgramError for Error {
    fn print<E>(&self)
    where
        E: 'static + std::error::Error + DecodeError<E> + PrintProgramError + FromPrimitive,
    {
        match self {
            Error::ExpectedToken => msg!("Error: ExpectedToken"),
            Error::ExpectedAccount => msg!("Error: ExpectedAccount"),
            Error::ExpectedBridge => msg!("Error: ExpectedBridge"),
            Error::ExpectedGuardianSet => msg!("Error: ExpectedGuardianSet"),
            Error::UninitializedState => msg!("Error: State is unititialized"),
            Error::InvalidProgramAddress => msg!("Error: InvalidProgramAddress"),
            Error::InvalidVAAFormat => msg!("Error: InvalidVAAFormat"),
            Error::InvalidVAASignature => msg!("Error: InvalidVAASignature"),
            Error::AlreadyExists => msg!("Error: AlreadyExists"),
            Error::InvalidDerivedAccount => msg!("Error: InvalidDerivedAccount"),
            Error::ParseFailed => msg!("Error: ParseFailed"),
            Error::GuardianSetExpired => msg!("Error: GuardianSetExpired"),
            Error::VAAClaimed => msg!("Error: VAAClaimed"),
            Error::WrongBridgeOwner => msg!("Error: WrongBridgeOwner"),
            Error::OldGuardianSet => msg!("Error: OldGuardianSet"),
            Error::GuardianIndexNotIncreasing => msg!("Error: GuardianIndexNotIncreasing"),
            Error::VAAMessageMismatch => msg!("Error: VAAProposalMismatch"),
            Error::VAATooLong => msg!("Error: VAATooLong"),
            Error::VAAAlreadySubmitted => msg!("Error: VAAAlreadySubmitted"),
            Error::GuardianSetMismatch => msg!("Error: GuardianSetMismatch"),
            Error::InsufficientFees => msg!("Error: InsufficientFees"),
            Error::InvalidOwner => msg!("Error: InvalidOwner"),
            Error::InvalidSysvar => msg!("Error: InvalidSysvar"),
            Error::InvalidChain => msg!("Error: InvalidChain"),
            Error::InvalidVAAAction => msg!("Error: InvalidVAAAction"),
            Error::EmitterNotSigner => msg!("Error: EmitterNotSigner"),
        }
    }
}

impl From<Error> for ProgramError {
    fn from(e: Error) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl From<std::io::Error> for Error {
    fn from(_: std::io::Error) -> Self {
        Error::ParseFailed
    }
}

impl<T> DecodeError<T> for Error {
    fn type_of() -> &'static str {
        "Swap Error"
    }
}
