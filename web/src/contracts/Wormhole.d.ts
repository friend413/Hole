/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WormholeInterface extends Interface {
  functions: {
    guardian_set_index: TypedFunctionDescription<{ encode([]: []): string }>;

    guardian_sets: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    isWrappedAsset: TypedFunctionDescription<{ encode([]: [string]): string }>;

    vaa_expiry: TypedFunctionDescription<{ encode([]: []): string }>;

    wrappedAssetMaster: TypedFunctionDescription<{ encode([]: []): string }>;

    wrappedAssets: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    submitVAA: TypedFunctionDescription<{ encode([vaa]: [Arrayish]): string }>;

    lockAssets: TypedFunctionDescription<{
      encode([asset, amount, recipient, target_chain]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    lockETH: TypedFunctionDescription<{
      encode([recipient, target_chain]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {
    LogGuardianSetChanged: TypedEventDescription<{
      encodeTopics([oldGuardian, newGuardian]: [
        {
          x: BigNumberish;
          parity: BigNumberish;
          expiration_time: BigNumberish;
        } | null,
        {
          x: BigNumberish;
          parity: BigNumberish;
          expiration_time: BigNumberish;
        } | null
      ]): string[];
    }>;

    LogTokensLocked: TypedEventDescription<{
      encodeTopics([
        target_chain,
        token_chain,
        token,
        sender,
        recipient,
        amount
      ]: [null, null, Arrayish | null, Arrayish | null, null, null]): string[];
    }>;
  };
}

export class Wormhole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Wormhole;
  attach(addressOrName: string): Wormhole;
  deployed(): Promise<Wormhole>;

  on(event: EventFilter | string, listener: Listener): Wormhole;
  once(event: EventFilter | string, listener: Listener): Wormhole;
  addListener(eventName: EventFilter | string, listener: Listener): Wormhole;
  removeAllListeners(eventName: EventFilter | string): Wormhole;
  removeListener(eventName: any, listener: Listener): Wormhole;

  interface: WormholeInterface;

  functions: {
    guardian_set_index(overrides?: TransactionOverrides): Promise<number>;

    "guardian_set_index()"(overrides?: TransactionOverrides): Promise<number>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      x: BigNumber;
      parity: number;
      expiration_time: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    "guardian_sets(uint32)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      x: BigNumber;
      parity: number;
      expiration_time: number;
      0: BigNumber;
      1: number;
      2: number;
    }>;

    isWrappedAsset(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isWrappedAsset(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    vaa_expiry(overrides?: TransactionOverrides): Promise<number>;

    "vaa_expiry()"(overrides?: TransactionOverrides): Promise<number>;

    wrappedAssetMaster(overrides?: TransactionOverrides): Promise<string>;

    "wrappedAssetMaster()"(overrides?: TransactionOverrides): Promise<string>;

    wrappedAssets(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "wrappedAssets(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    submitVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitVAA(bytes)"(
      vaa: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "lockAssets(address,uint256,bytes32,uint8)"(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    lockETH(
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "lockETH(bytes32,uint8)"(
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  guardian_set_index(overrides?: TransactionOverrides): Promise<number>;

  "guardian_set_index()"(overrides?: TransactionOverrides): Promise<number>;

  guardian_sets(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    x: BigNumber;
    parity: number;
    expiration_time: number;
    0: BigNumber;
    1: number;
    2: number;
  }>;

  "guardian_sets(uint32)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    x: BigNumber;
    parity: number;
    expiration_time: number;
    0: BigNumber;
    1: number;
    2: number;
  }>;

  isWrappedAsset(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isWrappedAsset(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  vaa_expiry(overrides?: TransactionOverrides): Promise<number>;

  "vaa_expiry()"(overrides?: TransactionOverrides): Promise<number>;

  wrappedAssetMaster(overrides?: TransactionOverrides): Promise<string>;

  "wrappedAssetMaster()"(overrides?: TransactionOverrides): Promise<string>;

  wrappedAssets(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "wrappedAssets(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  submitVAA(
    vaa: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitVAA(bytes)"(
    vaa: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  lockAssets(
    asset: string,
    amount: BigNumberish,
    recipient: Arrayish,
    target_chain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "lockAssets(address,uint256,bytes32,uint8)"(
    asset: string,
    amount: BigNumberish,
    recipient: Arrayish,
    target_chain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  lockETH(
    recipient: Arrayish,
    target_chain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "lockETH(bytes32,uint8)"(
    recipient: Arrayish,
    target_chain: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    LogGuardianSetChanged(
      oldGuardian: {
        x: BigNumberish;
        parity: BigNumberish;
        expiration_time: BigNumberish;
      } | null,
      newGuardian: {
        x: BigNumberish;
        parity: BigNumberish;
        expiration_time: BigNumberish;
      } | null
    ): EventFilter;

    LogTokensLocked(
      target_chain: null,
      token_chain: null,
      token: Arrayish | null,
      sender: Arrayish | null,
      recipient: null,
      amount: null
    ): EventFilter;
  };

  estimate: {
    guardian_set_index(overrides?: TransactionOverrides): Promise<BigNumber>;

    "guardian_set_index()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "guardian_sets(uint32)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isWrappedAsset(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isWrappedAsset(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    vaa_expiry(overrides?: TransactionOverrides): Promise<BigNumber>;

    "vaa_expiry()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    wrappedAssetMaster(overrides?: TransactionOverrides): Promise<BigNumber>;

    "wrappedAssetMaster()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    wrappedAssets(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "wrappedAssets(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitVAA(bytes)"(
      vaa: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lockAssets(address,uint256,bytes32,uint8)"(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    lockETH(
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lockETH(bytes32,uint8)"(
      recipient: Arrayish,
      target_chain: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
